version: '3.8'

services:
  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - forex-net
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres-kafka:
    image: postgres
    container_name: kafka-db
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: forex_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - forex-net
    volumes:
      - postgres-data-collector:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  postgres-rest-platform:
    image: postgres
    container_name: rest-platform-db
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: rest_platform_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - forex-net
    volumes:
      - postgres-rest-provider:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s





  forex-data-collector:
    build:
      context: ./forex-data-collector
      dockerfile: Dockerfile
    image: yusufokr0/forex-data-collector
    container_name: forex-data-collector
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC_RAW: raw-rates
      KAFKA_TOPIC_CALCULATED: calculated-rates
      SUBSCRIBERS_CONFIG_PATH: /app/conf/subscribers.json
    volumes:
      - main-app-log:/app/forex-data-collector/logs
      - ./external-config/main-app/subscribers.json:/app/conf/subscribers.json:ro
    networks:
      - forex-net
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      tcp-data-provider:
        condition: service_started
      rest-data-provider:
        condition: service_started



  tcp-data-provider:
    build:
      context: ./tcp-data-provider
      dockerfile: Dockerfile
    image: yusufokr0/tcp-data-provider
    container_name: tcp-platform
    ports:
      - "8090:8090"
    environment:
      MINIMUM_RATE_CHANGE: 0.001
      MAXIMUM_RATE_CHANGE: 0.002
      PUBLISH_FREQUENCY: 7000
      SPIKE_PERCENTAGE: 0.01
      SPIKE_INTERVAL: 20
      USER_CREDENTIALS: yusuf|pass,admin|admin,32bit|aloha,user1|user1
    volumes:
        # Start the desired exchange rates with the desired prices
        # from the 'external-config' folder
      - ./external-config/tcp-platform:/conf
      - tcp-platform-log:/app/tcp-data-provider/logs
    networks:
      - forex-net


  rest-data-provider:
    build:
      context: ./rest-data-provider
      dockerfile: Dockerfile
    image: yusufokr0/rest-data-provider
    container_name: rest-platform
    ports:
      - "8092:8092"
    environment:
      DATABASE_URL: jdbc:postgresql://rest-platform-db:5432/rest_platform_db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      REDIS_CUSTOM_HOST: redis
      REDIS_CUSTOM_PORT: 6379
      MINIMUM_RATE_CHANGE: 0.001
      MAXIMUM_RATE_CHANGE: 0.002
      RATE_UPDATE_INTERVAL: 7000
      SPIKE_PERCENTAGE: 0.01
      SPIKE_INTERVAL: 20
      LOG_LEVEL_TOYOTA: INFO
      SPRING_CONFIG_LOCATION: file:/app/config/application.yml,classpath:application.properties
      # IF YOU WANT TO START THE SYSTEM WITH YOUR SELECTED EXCHANGE RATES,
      # SET THE CURRENCY PAIRS AND THEIR INITIAL VALUES FROM THE APPLICATION YAML FILE
      # IN THE 'external-config' FOLDER AND MOUNT THE FILE INTO THE CONTAINER.
    volumes:
      - rest-platform-log:/app/rest-data-provider/logs
      - ./external-config/rest-platform/application.yml:/app/config/application.yml:ro
    depends_on:
      postgres-rest-platform:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - forex-net



  kafka-db-consumer:
    build:
      context: ./kafka-db-consumer
      dockerfile: Dockerfile
    image: yusufokr0/kafka-db-consumer
    container_name: kafka-db-consumer
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-kafka:5432/forex_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      KAFKA_CUSTOM_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CUSTOM_CONSUMER_GROUP_ID: postgres
      KAFKA_CUSTOM_CONSUMER_RAW_TOPIC: raw-rates
      KAFKA_CUSTOM_CONSUMER_CALC_TOPIC: calculated-rates
      KAFKA_CUSTOM_CONSUMER_AUTO_OFFSET_RESET: earliest
    networks:
      - forex-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres-kafka:
        condition: service_healthy



  kafka-opensearch-consumer:
    build:
      context: ./kafka-opensearch-consumer
      dockerfile: Dockerfile
    image: yusufokr0/kafka-opensearch-consumer
    container_name: kafka-opensearch-consumer
    environment:
      KAFKA_CUSTOM_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CUSTOM_CONSUMER_GROUP_ID: opensearch
      KAFKA_CUSTOM_CONSUMER_RAW_TOPIC: raw-rates
      KAFKA_CUSTOM_CONSUMER_CALC_TOPIC: calculated-rates
      KAFKA_CUSTOM_CONSUMER_AUTO_OFFSET_RESET: earliest
      OPENSEARCH_HOST: opensearch
      OPENSEARCH_PORT: 9200
      OPENSEARCH_USERNAME: admin
      OPENSEARCH_PASSWORD: Yusuf.32Bits
    depends_on:
      kafka:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    networks:
      - forex-net





  ######## KAFKA COMPONENTS ########

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - forex-net
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_started
    networks:
      - forex-net
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:29092", "--list"]
      interval: 20s
      timeout: 10s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: forex-kafka-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - forex-net




  ######## LOG PIPELINE ########


  filebeat:
    image: docker.elastic.co/beats/filebeat-oss:7.12.1
    container_name: filebeat
    entrypoint: "filebeat -e -strict.perms=false"   # bypass config file permission check.
    user: root
    volumes:
      - ./forex-data-collector/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - main-app-log:/var/log/main-app:ro  # only readable
    depends_on:
      logstash:
        condition: service_started
      forex-data-collector:
        condition: service_started
    networks:
      - forex-net



  logstash:
    image: opensearchproject/logstash-oss-with-opensearch-output-plugin:7.16.2
    container_name: logstash
    user: root
    ports:
      - "5044:5044"
    volumes:
      - ./forex-data-collector/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      opensearch:
        condition: service_healthy
    networks:
      - forex-net

  opensearch:
    image: opensearchproject/opensearch:latest
    container_name: opensearch
    ports:
      - "9200:9200" # OpenSearch API
      - "9600:9600" # Performans izleme
    environment:
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
      - bootstrap.memory_lock=true
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=Yusuf.32Bits
    networks:
      - forex-net
    healthcheck:
      test: [ "CMD", "curl", "-k", "-u", "admin:Yusuf.32Bits", "-f", "https://localhost:9200/_cluster/health" ]
      interval: 10s
      timeout: 10s
      retries: 6

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest
    container_name: opensearch-dashboards
    ports:
      - "5601:5601" # OpenSearch Dashboards web arayüzü
    environment:
      - OPENSEARCH_HOSTS=["https://opensearch:9200"]
      - SERVER_HOST=0.0.0.0
      - OPENSEARCH_USERNAME=admin
      - OPENSEARCH_PASSWORD=Yusuf.32Bits
    depends_on:
      opensearch:
        condition: service_healthy
    networks:
      - forex-net


volumes:
  redis-data:
  zk-data:
  zk-log:
  kafka-data:
  postgres-data-collector:
  postgres-rest-provider:
  rest-platform-log:
  tcp-platform-log:
  main-app-log:

networks:
  forex-net:
    driver: bridge
